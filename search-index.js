crystal_doc_search_index_callback({"repository_name":"myip","body":"# myip\n\n返回本机的公网 IP 以及访问外网的公网 IP，匿名使用以下服务:\n\nhttp://www.ip111.cn/ 获取 IP 信息.\nhttps://www.ipshudi.com 针对 ip111.cn 获取的 IP 信息,查询更加详细的信息.\n\n此外,也额外访问以下网址获取信息作为补充\n\nhttp://www.ip138.com 获取国内 IP 信息\nhttps://api.ip.sb/geoip 获取外网的详细 IP 信息\n\n![ip111.png](images/ip111.png)\n\n## Contributing\n\n1. Fork it (<https://github.com/crystal-china/myip/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Billy.Zheng](https://github.com/zw963) - creator and maintainer\n","program":{"html_id":"myip/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"myip","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"myip/Myip","path":"Myip.html","kind":"class","full_name":"Myip","name":"Myip","abstract":false,"superclass":{"html_id":"myip/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"myip/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"myip/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/myip.cr","line_number":15,"url":"https://github.com/crystal-china/myip/blob/v0.5.2/src/myip.cr#L15"},{"filename":"src/myip/version.cr","line_number":1,"url":"https://github.com/crystal-china/myip/blob/v0.5.2/src/myip/version.cr#L1"}],"repository_name":"myip","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"{{ (`shards version \\\"/home/runner/work/myip/myip/src/myip\\\"`).chomp.stringify }}"}],"instance_methods":[{"html_id":"chan:Channel({String,String?})-instance-method","name":"chan","abstract":false,"location":{"filename":"src/myip.cr","line_number":16,"url":"https://github.com/crystal-china/myip/blob/v0.5.2/src/myip.cr#L16"},"def":{"name":"chan","visibility":"Public","body":"@chan"},"external_var":false},{"html_id":"chan_send_count:Int32-instance-method","name":"chan_send_count","abstract":false,"location":{"filename":"src/myip.cr","line_number":17,"url":"https://github.com/crystal-china/myip/blob/v0.5.2/src/myip.cr#L17"},"def":{"name":"chan_send_count","return_type":"Int32","visibility":"Public","body":"@chan_send_count"},"external_var":false},{"html_id":"chan_send_count=(chan_send_count:Int32)-instance-method","name":"chan_send_count=","abstract":false,"args":[{"name":"chan_send_count","external_name":"chan_send_count","restriction":"Int32"}],"args_string":"(chan_send_count : Int32)","args_html":"(chan_send_count : Int32)","location":{"filename":"src/myip.cr","line_number":17,"url":"https://github.com/crystal-china/myip/blob/v0.5.2/src/myip.cr#L17"},"def":{"name":"chan_send_count=","args":[{"name":"chan_send_count","external_name":"chan_send_count","restriction":"Int32"}],"visibility":"Public","body":"@chan_send_count = chan_send_count"},"external_var":false},{"html_id":"detail_chan_send_count:Int32-instance-method","name":"detail_chan_send_count","abstract":false,"location":{"filename":"src/myip.cr","line_number":18,"url":"https://github.com/crystal-china/myip/blob/v0.5.2/src/myip.cr#L18"},"def":{"name":"detail_chan_send_count","return_type":"Int32","visibility":"Public","body":"@detail_chan_send_count"},"external_var":false},{"html_id":"detail_chan_send_count=(detail_chan_send_count:Int32)-instance-method","name":"detail_chan_send_count=","abstract":false,"args":[{"name":"detail_chan_send_count","external_name":"detail_chan_send_count","restriction":"Int32"}],"args_string":"(detail_chan_send_count : Int32)","args_html":"(detail_chan_send_count : Int32)","location":{"filename":"src/myip.cr","line_number":18,"url":"https://github.com/crystal-china/myip/blob/v0.5.2/src/myip.cr#L18"},"def":{"name":"detail_chan_send_count=","args":[{"name":"detail_chan_send_count","external_name":"detail_chan_send_count","restriction":"Int32"}],"visibility":"Public","body":"@detail_chan_send_count = detail_chan_send_count"},"external_var":false},{"html_id":"ip_from_ip111-instance-method","name":"ip_from_ip111","abstract":false,"location":{"filename":"src/myip.cr","line_number":45,"url":"https://github.com/crystal-china/myip/blob/v0.5.2/src/myip.cr#L45"},"def":{"name":"ip_from_ip111","visibility":"Public","body":"spinner = Term::Spinner::Multi.new(\":spinner\", format: :dots, interval: 0.2.seconds)\n\n\nip111_url = \"http://www.ip111.cn\"\nsp1 = spinner.register(\":spinner Connecting to #{ip111_url.as_title} ...\")\n\ndoc = uninitialized Lexbor::Parser\n\nsp1.run do\n  doc, _code = from_url(ip111_url)\n\n  title = (doc.css(\".card-header\")).first.tag_text.strip\n  ipinfo = (doc.css(\".card-body p\")).first.tag_text.strip\n\n  STDERR.puts(\"#{title}：#{ipinfo}\")\n\n  sp1.success\nend\n\nheaders = HTTP::Headers {\"Referer\" => \"http://www.ip111.cn/\"}\n\n\n(doc.nodes(\"iframe\")).each do |node|\n  self.chan_send_count = chan_send_count() + 1\n  url = (node.attribute_by(\"src\")).not_nil!\n  title = (node.parent!.parent!.parent!.css(\".card-header\")).first.tag_text.strip\n\n  sp = spinner.register(\"Connecting to #{url.as_title} ...\")\n\n  spawn do\n    sp.run do\n      begin\n        doc, _code = from_url(url, headers: headers)\n        ipinfo = doc.body!.tag_text.strip\n\n        ip = ipinfo[/[a-z0-9:.]+/]\n\n        chan.send({\"#{title}：#{ipinfo}\", ip})\n\n        sp.success\n      rescue ex : ArgumentError | Socket::Error\n        chan.send({ex.message.not_nil!, nil})\n      end\n    end\n  end\nend\n"},"external_var":false},{"html_id":"ip_from_ip138-instance-method","name":"ip_from_ip138","abstract":false,"location":{"filename":"src/myip.cr","line_number":92,"url":"https://github.com/crystal-china/myip/blob/v0.5.2/src/myip.cr#L92"},"def":{"name":"ip_from_ip138","visibility":"Public","body":"spinner = Term::Spinner::Multi.new(\":spinner\", format: :dots, interval: 0.2.seconds)\nself.chan_send_count = chan_send_count + 1\n\nspawn do\n  begin\n    url = \"https://www.ip138.com\"\n    sp = spinner.register(\"Connecting to #{url.as_title} ...\")\n\n    ip138_url = \"\"\n\n    sp.run do\n      doc, _code = from_url(url, follow: true)\n      ip138_url = ((doc.css(\"iframe\")).first.attribute_by(\"src\")).not_nil!\n\n      sp.success\n    end\n\n    headers = HTTP::Headers {\"Origin\" => \"https://ip.skk.moe\"}\n\n    sp1 = spinner.register(\"Connecting to #{ip138_url.as_title} ...\")\n\n    code = 0\n    doc = uninitialized Lexbor::Parser\n\n    sp1.run do\n      doc, code = from_url(\"https:#{ip138_url}\", headers: headers)\n\n      sp1.success\n    end\n\n    if code == 502\n      myip = (doc.css(\"body p span.F\")).first.tag_text[/IP:\\s*([0-9.]+)/, 1]\n      url = \"https://www.ip138.com/iplookup.php?ip=#{myip}\"\n\n      sp2 = spinner.register(\"Connecting to #{url.as_title} ...\")\n\n      sp2.run do\n        doc, _code = from_url(url, headers: headers)\n\n        output = String.build do |io|\n          (doc.css(\"div.table-box>table>tbody tr\")).each do |x| io << x.tag_text end\n        end\n\n        chan.send({output.squeeze('\\n'), nil})\n\n        sp2.success\n      end\n    else\n      chan.send({(doc.css(\"body p\")).first.tag_text.strip, nil})\n    end\n  rescue ex : ArgumentError | Socket::Error\n    chan.send({ex.message.not_nil!, nil})\n  end\nend\n"},"external_var":false},{"html_id":"ip_from_ip_sb-instance-method","name":"ip_from_ip_sb","abstract":false,"location":{"filename":"src/myip.cr","line_number":20,"url":"https://github.com/crystal-china/myip/blob/v0.5.2/src/myip.cr#L20"},"def":{"name":"ip_from_ip_sb","visibility":"Public","body":"self.chan_send_count = chan_send_count() + 1\n\nspawn do\n  url = \"https://api.ip.sb/geoip\"\n  spinner = Term::Spinner.new(\":spinner Connecting to #{url.as_title} ...\", format: :dots, interval: 0.2.seconds)\n\n  spinner.run do\n    begin\n      response = HTTP::Client.get(url)\n      body = response.body\n      result = JSON.parse(body)\n      io = IO::Memory.new\n      PrettyPrint.format(result, io, width: 79)\n      io.rewind\n      chan.send({io.gets_to_end, nil})\n\n      spinner.success\n    rescue JSON::ParseException\n      chan.send({body.not_nil!, nil})\n    rescue ex : ArgumentError | Socket::Error\n      chan.send({ex.message.not_nil!, nil})\n    end\n  end\nend\n"},"external_var":false},{"html_id":"process-instance-method","name":"process","abstract":false,"location":{"filename":"src/myip.cr","line_number":147,"url":"https://github.com/crystal-china/myip/blob/v0.5.2/src/myip.cr#L147"},"def":{"name":"process","visibility":"Public","body":"spinner = Term::Spinner::Multi.new(\":spinner\", format: :dots, interval: 0.2.seconds)\ndetail_chan = Channel(String).new\n\nchan_send_count.times do\n  select\n  when value = chan.receive\n    ipinfo, ip = value\n\n    STDERR.puts(\"\\n#{ipinfo}\")\n\n    if !ip.nil?\n      self.detail_chan_send_count = detail_chan_send_count() + 1\n      details_ip_url = \"https://www.ipshudi.com/#{ip}.htm\"\n      sp = spinner.register(\"Connecting to #{details_ip_url.as_title} ...\")\n\n      spawn do\n        sp.run do\n          doc, _code = from_url(details_ip_url)\n\n          output = String.build do |io|\n            (doc.css(\"div.ft>table>tbody>tr>td\")).each do |x|\n              io << x.tag_text\n            end\n          end\n\n          detail_chan.send(output.squeeze('\\n'))\n\n          sp.success\n        end\n      end\n    end\n  when timeout(5.seconds)\n    STDERR.puts(\"Timeout, check your network connection!\")\n    exit\n  end\nend\n\ndetail_chan_send_count.times do\n  select\n  when ipinfo = detail_chan.receive\n    STDERR.puts(ipinfo)\n  end\nend\n"},"external_var":false}]},{"html_id":"myip/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"myip/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"myip/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"myip/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"myip/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/myip.cr","line_number":9,"url":"https://github.com/crystal-china/myip/blob/v0.5.2/src/myip.cr#L9"}],"repository_name":"myip","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"myip/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"doc":"A `String` represents an immutable sequence of UTF-8 characters.\n\nA `String` is typically created with a string literal, enclosing UTF-8 characters\nin double quotes:\n\n```\n\"hello world\"\n```\n\nSee [`String` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/string.html) in the language reference.\n\nA backslash can be used to denote some characters inside the string:\n\n```\n\"\\\"\" # double quote\n\"\\\\\" # backslash\n\"\\e\" # escape\n\"\\f\" # form feed\n\"\\n\" # newline\n\"\\r\" # carriage return\n\"\\t\" # tab\n\"\\v\" # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n\"\\u0041\" # == \"A\"\n```\n\nOr you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):\n\n```\n\"\\u{41}\" # == \"A\"\n```\n\nA string can span multiple lines:\n\n```\n\"hello\n      world\" # same as \"hello\\n      world\"\n```\n\nNote that in the above example trailing and leading spaces, as well as newlines,\nend up in the resulting string. To avoid this, you can split a string into multiple lines\nby joining multiple literals with a backslash:\n\n```\n\"hello \" \\\n\"world, \" \\\n\"no newlines\" # same as \"hello world, no newlines\"\n```\n\nAlternatively, a backslash followed by a newline can be inserted inside the string literal:\n\n```\n\"hello \\\n     world, \\\n     no newlines\" # same as \"hello world, no newlines\"\n```\n\nIn this case, leading whitespace is not included in the resulting string.\n\nIf you need to write a string that has many double quotes, parentheses, or similar\ncharacters, you can use alternative literals:\n\n```\n# Supports double quotes and nested parentheses\n%(hello (\"world\")) # same as \"hello (\\\"world\\\")\"\n\n# Supports double quotes and nested brackets\n%[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\"\n\n# Supports double quotes and nested curlies\n%{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\"\n\n# Supports double quotes and nested angles\n%<hello <\"world\">> # same as \"hello <\\\"world\\\">\"\n```\n\nTo create a `String` with embedded expressions, you can use string interpolation:\n\n```\na = 1\nb = 2\n\"sum = #{a + b}\" # \"sum = 3\"\n```\n\nThis ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.\n\nIf you need to dynamically build a string, use `String#build` or `IO::Memory`.\n\n### Non UTF-8 valid strings\n\nA string might end up being composed of bytes which form an invalid\nbyte sequence according to UTF-8. This can happen if the string is created\nvia one of the constructors that accept bytes, or when getting a string\nfrom `String.build` or `IO::Memory`. No exception will be raised, but every\nbyte that doesn't start a valid UTF-8 byte sequence is interpreted as though\nit encodes the Unicode replacement character (U+FFFD) by itself. For example:\n\n```\n# here 255 is not a valid byte value in the UTF-8 encoding\nstring = String.new(Bytes[255, 97])\nstring.valid_encoding? # => false\n\n# The first char here is the unicode replacement char\nstring.chars # => ['�', 'a']\n```\n\nOne can also create strings with specific byte value in them by\nusing octal and hexadecimal escape sequences:\n\n```\n# Octal escape sequences\n\"\\101\" # # => \"A\"\n\"\\12\"  # # => \"\\n\"\n\"\\1\"   # string with one character with code point 1\n\"\\377\" # string with one byte with value 255\n\n# Hexadecimal escape sequences\n\"\\x41\" # # => \"A\"\n\"\\xFF\" # string with one byte with value 255\n```\n\nThe reason for allowing strings that don't have a valid UTF-8 sequence\nis that the world is full of content that isn't properly encoded,\nand having a program raise an exception or stop because of this\nis not good. It's better if programs are more resilient, but\nshow a replacement character when there's an error in incoming data.\n\nNote that this interpretation only applies to methods inside Crystal; calling\n`#to_slice` or `#to_unsafe`, e.g. when passing a string to a C library, will\nexpose the invalid UTF-8 byte sequences. In particular, `Regex`'s underlying\nengine may reject strings that are not valid UTF-8, or it may invoke undefined\nbehavior on invalid strings. If this is undesired, `#scrub` could be used to\nremove the offending byte sequences first.","summary":"<p>A <code><a href=\"String.html\">String</a></code> represents an immutable sequence of UTF-8 characters.</p>","instance_methods":[{"html_id":"as_title-instance-method","name":"as_title","abstract":false,"location":{"filename":"src/myip.cr","line_number":10,"url":"https://github.com/crystal-china/myip/blob/v0.5.2/src/myip.cr#L10"},"def":{"name":"as_title","visibility":"Public","body":"(self.colorize(:yellow)).on_blue.bold"},"external_var":false}]}]}})